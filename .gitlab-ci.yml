variables:
    REGISTRY: $CI_REGISTRY
    IMAGE_TAG: $CI_REGISTRY_IMAGE
    DOCKER_REGISTRY: 285302907374.dkr.ecr.eu-central-1.amazonaws.com
    AWS_DEFAULT_REGION: eu-central-1
    KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: gitlab

image: node:14

stages:
    - dependencies
    - lint
    - build
    - test
    - dockerize-backend
    - dockerize-frontend
    - deploy

cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
        - sys-src/backend/node_modules/
        - sys-src/frontend/node_modules/

default:
    tags:
        - cluster

install_dependencies_backend:
    stage: dependencies
    script:
        - cd sys-src/backend
        - npm install

install_dependencies_frontend:
    stage: dependencies
    script:
        - cd sys-src/frontend
        - npm install

lint_backend:
    stage: lint
    script:
        - cd sys-src/backend
        - npm install
        - npm run lint

lint_frontend:
    stage: lint
    script:
        - cd sys-src/frontend
        - npm install
        - npm run lint

build_backend:
    stage: build
    script:
        - cd sys-src/backend
        - npm install
        - npm run build

build_frontend:
    stage: build
    script:
        - cd sys-src/frontend
        - npm install
        - npm run build

test_backend:
    stage: test
    script:
        - cd sys-src/backend
        - npm install
        - npm run test

test_frontend:
    stage: test
    script:
        - cd sys-src/frontend
        - npm install
        - npm run test

build-docker-backend:
    stage: dockerize-backend
    image: docker:stable
    services:
        - docker:dind
    only:
        - main
    before_script:
        - apk add --no-cache curl jq python3 py3-pip
        - pip install awscli
        - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
        - aws --version
    script:
        - export DOCKER_HOST=$DOCKER_PORT
        - cd sys-src/backend
        - docker build -t $DOCKER_REGISTRY/backend:latest .
        - docker push $DOCKER_REGISTRY/backend:latest
        - docker build -t $DOCKER_REGISTRY/backend:$CI_PIPELINE_IID .
        - docker push $DOCKER_REGISTRY/backend:$CI_PIPELINE_IID

build-docker-frontend:
    stage: dockerize-frontend
    image: docker:stable
    services:
        - docker:dind
    only:
        - main
    before_script:
        - apk add --no-cache curl jq python3 py3-pip
        - pip install awscli
        - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
        - aws --version
    script:
        - export DOCKER_HOST=$DOCKER_PORT
        - cd sys-src/frontend
        - docker build -t $DOCKER_REGISTRY/frontend:latest .
        - docker push $DOCKER_REGISTRY/frontend:latest
        - docker build -t $DOCKER_REGISTRY/frontend:$CI_PIPELINE_IID .
        - docker push $DOCKER_REGISTRY/frontend:$CI_PIPELINE_IID

deploy-prod:
    stage: deploy
    image:
        name: bitnami/kubectl:1.14
        entrypoint: [""]
    environment: eks
    environment: KUBERNETES_SERVICE_ACCOUNT_OVERWRITE_ALLOWED
    only:
        - main
    script:
        - kubectl config set-context --current --namespace=fireforcedefense-27426248
        - kubectl set image deployment frontend frontend=$DOCKER_REGISTRY/frontend:latest --namespace=fireforcedefense-27426248
        - kubectl set image deployment backend backend=$DOCKER_REGISTRY/backend:latest --namespace=fireforcedefense-27426248
